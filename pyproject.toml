[project]
name = "shargain"
version = "0.0.1"
dependencies = [
    "django",
    "django-dbbackup",
    "djangorestframework",
    "drf-yasg",
    "django-jazzmin",
    "django-extensions",
    "django-debug-toolbar",
    "django-admin-display",
    "django-click",
    "celery",
    "psycopg2-binary",
    "requests",
    "bs4",
    "ipython",
    "environs",
    "pytelegrambotapi",
    "discord",
    "django-filter",
    "django-cors-headers",
    "django-better-admin-arrayfield",
    "gunicorn",
    "sentry-sdk",
]


[dependency-groups]
dev = [
    "pytest",
    "pytest-django",
    "pytest-sugar",
    "pytest-xdist",
    "black",
    "mypy",
    "django-stubs",
    "types-requests",
    "ruff>=0.11.10",
]
deployment = [
    "ansible>=10.7.0",
    "mitogen>=0.3.23",
]

[tool.uv]
package = false

[tool.ruff]
target-version = "py310"
line-length = 120
extend-exclude = [
    "__pycache__",
    "build",
]
[tool.ruff.lint]
select = [
    "A", # flake8 builtins
    "S",   # flake8-bandit
    "DJ",  # flake8-django
    "PT",  # flake8-pytest-style
    "TID", # flake8-tidy-imports
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "T10", # flake8-debugger
    "ERA", # flake8-eradicate
    "C4", # flake8-comprehensions
    "B", # flake8-bugbear
    "G", # flake8-logging-format
    "E", # pycodestyle error
    "W", # pycodestyle warning
    "F", # pyflakes
    "N", # pep8-naming
    "UP", # pyupgrade
    "I", # isort
    "C9", # mccabe
    "I", # isort
]


[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures can be unused.
    "S105",     # "Possible hardcoded password".
]
"**settings/**" = [
    "F405",     # variable may be undefined due to * import
    "F403",      # allow * imports
    "TID252",   # Allow relative imports
]
"**/settings/tests.py" = [
    "S105",
]
"**/settings/local.py" = [
    "S105",
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:"
]
omit = [
    "manage.py",
    "**/wsgi.py",
    "**/asgi.py",
    "**/settings/*.py",
    "**/migrations/*.py",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "shargain.settings.local"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
norecursedirs = [".git/*",
    ".mypy_cache/*",
    ".pytest_cache/*",
    "migrations/*",
    "settings/*",
]
addopts = "--nomigrations"

[tool.mypy]
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]
check_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.django-stubs]
django_settings_module = "shargain.settings.local"

[[tool.mypy.overrides]]
module = [
    "*.migrations.*",
    "*.settings.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = "factory.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "django_extensions.*",
    "factory.*",
    "celery.*",
]
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py310, ruff-format, ruff-lint, mypy
skipsdist = True

[gh-actions]
python =
    3.10: py310

[testenv:ruff-format]
deps = ruff
commands = ruff format --check shargain

[testenv:ruff-lint]
deps = ruff
commands = ruff check shargain

[testenv:mypy]
runner = uv-venv-lock-runner
commands = mypy shargain

[testenv]
setenv = PYTHONPATH = {toxinidir}
commands = pytest shargain
"""