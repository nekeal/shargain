// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetMyTargetData, GetMyTargetResponses, GetMyTargetErrors, GetSingleTargetData, GetSingleTargetResponses, GetSingleTargetErrors, UpdateTargetNotificationConfigData, UpdateTargetNotificationConfigResponses, UpdateTargetNotificationConfigErrors, AddUrlToTargetData, AddUrlToTargetResponses, AddUrlToTargetErrors, DeleteTargetUrlData, DeleteTargetUrlResponses, DeleteTargetUrlErrors, ActivateScrapingUrlData, ActivateScrapingUrlResponses, ActivateScrapingUrlErrors, DeactivateScrapingUrlData, DeactivateScrapingUrlResponses, DeactivateScrapingUrlErrors, ToggleTargetNotificationsData, ToggleTargetNotificationsResponses, ToggleTargetNotificationsErrors, SendTargetTestNotificationData, SendTargetTestNotificationResponses, SendTargetTestNotificationErrors, UpdateTargetNameData, UpdateTargetNameResponses, UpdateTargetNameErrors, GenerateTelegramTokenData, GenerateTelegramTokenResponses, GenerateTelegramTokenErrors, ListNotificationConfigsData, ListNotificationConfigsResponses, CreateNotificationConfigData, CreateNotificationConfigResponses, CreateNotificationConfigErrors, DeleteNotificationConfigData, DeleteNotificationConfigResponses, DeleteNotificationConfigErrors, GetNotificationConfigData, GetNotificationConfigResponses, GetNotificationConfigErrors, UpdateNotificationConfigData, UpdateNotificationConfigResponses, UpdateNotificationConfigErrors, ShargainPublicApiAuthGetCsrfTokenData, ShargainPublicApiAuthGetCsrfTokenResponses, ShargainPublicApiAuthLoginViewData, ShargainPublicApiAuthLoginViewResponses, ShargainPublicApiAuthSignupViewData, ShargainPublicApiAuthSignupViewResponses, ShargainPublicApiAuthLogoutViewData, ShargainPublicApiAuthLogoutViewResponses, GetMeData, GetMeResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get My Target
 */
export const getMyTarget = <ThrowOnError extends boolean = true>(options?: Options<GetMyTargetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyTargetResponses, GetMyTargetErrors, ThrowOnError>({
        url: '/api/public/targets/my-target',
        ...options
    });
};

/**
 * Get Single Target
 */
export const getSingleTarget = <ThrowOnError extends boolean = true>(options: Options<GetSingleTargetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleTargetResponses, GetSingleTargetErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}',
        ...options
    });
};

/**
 * Update Scraping Target Notification Config
 */
export const updateTargetNotificationConfig = <ThrowOnError extends boolean = true>(options: Options<UpdateTargetNotificationConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTargetNotificationConfigResponses, UpdateTargetNotificationConfigErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/notification-config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Url To Target
 */
export const addUrlToTarget = <ThrowOnError extends boolean = true>(options: Options<AddUrlToTargetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddUrlToTargetResponses, AddUrlToTargetErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/add-url',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Target Url
 */
export const deleteTargetUrl = <ThrowOnError extends boolean = true>(options: Options<DeleteTargetUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTargetUrlResponses, DeleteTargetUrlErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/urls/{url_id}',
        ...options
    });
};

/**
 * Activate Scraping Url
 */
export const activateScrapingUrl = <ThrowOnError extends boolean = true>(options: Options<ActivateScrapingUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ActivateScrapingUrlResponses, ActivateScrapingUrlErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/urls/{url_id}/activate',
        ...options
    });
};

/**
 * Deactivate Scraping Url
 */
export const deactivateScrapingUrl = <ThrowOnError extends boolean = true>(options: Options<DeactivateScrapingUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeactivateScrapingUrlResponses, DeactivateScrapingUrlErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/urls/{url_id}/deactivate',
        ...options
    });
};

/**
 * Toggle Notifications
 */
export const toggleTargetNotifications = <ThrowOnError extends boolean = true>(options: Options<ToggleTargetNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToggleTargetNotificationsResponses, ToggleTargetNotificationsErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/toggle-notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send Test Notification Endpoint
 */
export const sendTargetTestNotification = <ThrowOnError extends boolean = true>(options: Options<SendTargetTestNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendTargetTestNotificationResponses, SendTargetTestNotificationErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/send-test-notification',
        ...options
    });
};

/**
 * Update Target Name
 */
export const updateTargetName = <ThrowOnError extends boolean = true>(options: Options<UpdateTargetNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTargetNameResponses, UpdateTargetNameErrors, ThrowOnError>({
        url: '/api/public/targets/{target_id}/update-name',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Telegram Token Endpoint
 */
export const generateTelegramToken = <ThrowOnError extends boolean = true>(options?: Options<GenerateTelegramTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GenerateTelegramTokenResponses, GenerateTelegramTokenErrors, ThrowOnError>({
        url: '/api/public/notifications/telegram/generate-token',
        ...options
    });
};

/**
 * List Notification Configs Endpoint
 */
export const listNotificationConfigs = <ThrowOnError extends boolean = true>(options?: Options<ListNotificationConfigsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListNotificationConfigsResponses, unknown, ThrowOnError>({
        url: '/api/public/notifications',
        ...options
    });
};

/**
 * Create Notification Config Endpoint
 */
export const createNotificationConfig = <ThrowOnError extends boolean = true>(options: Options<CreateNotificationConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNotificationConfigResponses, CreateNotificationConfigErrors, ThrowOnError>({
        url: '/api/public/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Notification Config Endpoint
 */
export const deleteNotificationConfig = <ThrowOnError extends boolean = true>(options: Options<DeleteNotificationConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationConfigResponses, DeleteNotificationConfigErrors, ThrowOnError>({
        url: '/api/public/notifications/{config_id}',
        ...options
    });
};

/**
 * Get Notification Config Endpoint
 */
export const getNotificationConfig = <ThrowOnError extends boolean = true>(options: Options<GetNotificationConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationConfigResponses, GetNotificationConfigErrors, ThrowOnError>({
        url: '/api/public/notifications/{config_id}',
        ...options
    });
};

/**
 * Update Notification Config Endpoint
 */
export const updateNotificationConfig = <ThrowOnError extends boolean = true>(options: Options<UpdateNotificationConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateNotificationConfigResponses, UpdateNotificationConfigErrors, ThrowOnError>({
        url: '/api/public/notifications/{config_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Csrf Token
 * Get CSRF token for login requests
 */
export const shargainPublicApiAuthGetCsrfToken = <ThrowOnError extends boolean = true>(options?: Options<ShargainPublicApiAuthGetCsrfTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ShargainPublicApiAuthGetCsrfTokenResponses, unknown, ThrowOnError>({
        url: '/api/public/auth/csrf',
        ...options
    });
};

/**
 * Login View
 * Login endpoint that sets session cookie
 */
export const shargainPublicApiAuthLoginView = <ThrowOnError extends boolean = true>(options: Options<ShargainPublicApiAuthLoginViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShargainPublicApiAuthLoginViewResponses, unknown, ThrowOnError>({
        url: '/api/public/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Signup View
 * Signup endpoint that creates a user and logs them in
 */
export const shargainPublicApiAuthSignupView = <ThrowOnError extends boolean = true>(options: Options<ShargainPublicApiAuthSignupViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShargainPublicApiAuthSignupViewResponses, unknown, ThrowOnError>({
        url: '/api/public/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout View
 * Logout endpoint that clears session
 */
export const shargainPublicApiAuthLogoutView = <ThrowOnError extends boolean = true>(options?: Options<ShargainPublicApiAuthLogoutViewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShargainPublicApiAuthLogoutViewResponses, unknown, ThrowOnError>({
        url: '/api/public/auth/logout',
        ...options
    });
};

/**
 * Get Current User
 * Return the currently authenticated user
 */
export const getMe = <ThrowOnError extends boolean = true>(options?: Options<GetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            }
        ],
        url: '/api/public/me',
        ...options
    });
};
